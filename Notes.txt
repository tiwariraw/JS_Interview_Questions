1. 
parseInt("5.89") => 5, parseInt("5abc") => 5
Number("5.89") => 5.89, Number("5abc") => NaN

2.
typeof NaN is Number.
Not a Number (NaN), is a particular value of a numeric data type (often a floating-point number) 
which is undefined or unrepresentable, such as the result of 0/0.

3.
typeof null is Object

4. 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment

-> If used postfix, with operator after operand (for example, x++), the increment operator increments and returns the value before incrementing.
-> If used prefix, with operator before operand (for example, ++x), the increment operator increments and returns the value after incrementing.

5.
Primitive types (number, string, boolean, null, undefinded, symbol, bigint) are passed by value.

Non primitive types (array,object,function) are passed by reference

6.
const id1 = '123';
const id2 = '123';
console.log(id1 === id2); //true

const id1 = Symbol('123');
const id2 = Symbol('123');
console.log(id1 === id2); // false

6. 
JavaScript is a dynamically typed language. This means that variable types are determined at runtime, 
and you do not need to explicitly declare the type of a variable before using it. You can assign different types of values to a variable during its lifetime.

**Return type of variables in JavaScript
A. Primitive Datatypes
       Number => number
       String  => string
       Boolean  => boolean
       null  => object ⬅️
       undefined  =>  undefined
       Symbol  =>  symbol
       BigInt  =>  bigint

B. Non-primitive Datatypes
       Arrays  =>  object
       Function  =>  function ⬅️
       Object  =>  object

7.
Primitive values are created inside stack => (value is copied)
Non-Primitive values are created inside heap => (reference is passed)

8. 
Syntax: str1.split(separator,limit);

const name = 'Ashish Kumar Tiwari';

console.log(name.split(' ', 2)); // ['Ashish', 'Tiwari']
                            ⬆ limit

9. 
console.log(Array.from({name: 'ashish'})); // []

10.
let a = 1;
let b = 2;
let c = 3;

console.log(Array.of(a, b, c));

11.
const obj1 = {
    'name': 'ashish',
    'age': 25,
}

// The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object.
const obj2 = Object.create(obj1);

console.log(obj1);
console.log(obj2); // {}

console.log(obj2.name); // ashish
obj2.name = 'Dhimesh';
console.log(obj2.name); // Dhimesh

12.
JS arrays are actually objects.

const fruits = ['orange', 'banana', 'guava'];

fruits.name = 'ashish';

console.log(fruits); // check this fruits array in console

13.
// Use symbol as a key in an object

const myKey1 = Symbol('key1');

const obj = {
    'name': 'ashish',
    [myKey1]: 'waah',
}

console.log(obj);

//accessing symbol key value

console.log(obj[myKey]); // waah
console.log(obj.myKey1); // undefinded

14.
https://javascript.plainenglish.io/object-freeze-vs-object-seal-vs-object-preventextensions-e78ef3a24201

const obj1 = {
    'name': 'ashish',
    'age': 25,
    vehicle: {
        'vname': 'Audi',
        price: 1000,
    }
}

Object.freeze(obj1);

obj1.name = 'Dhimesh'; // modify
obj1.city = 'BMW'; // add
delete obj1.age; // delete
obj1.vehicle.price = 5500000; // this is valid

console.log(obj1);

15.
https://www.w3schools.com/js/js_function_bind.asp

16.
https://blog.hubspot.com/website/application-programming-interface-api

17.
Context is always the value of the this keyword which is a reference to the object that “owns” the currently executing code or the function where it's looked at

18.
// implicit return in arrow function having only one statement in function body
const f1 = (a, b) => a + b;
// or -> its better to wrap in a parentheses
const f2 = (a, b) => (a + b);


/*** If you want to return an object ***/

const f3 = () => { name: 'ashish' };
console.log(f3()); // undefined

// Soln: use parantheses
const f4 = () => ({ name: 'ashish' });
console.log(f4()); // {name: 'ashish'}

19.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping

20.
Falsy values in JS: 
    false, 0, -0, 0n, '', null, undefined, NaN

Rest every value is truthy value.
Some truthy values which may surprise you: 
    '0', 'false', ' ', [], {}, function(){},   

21. 
false == 0; // true
false == ''; // true
0 == ''; // true

22.
let val1 = null ?? 100;
console.log(val1); // 100

let val1 = undefined ?? 100;
console.log(val1); // 100

let val1 = null ?? 10 ?? 20;
console.log(val1); // 10

const user = { 
    'name': 'ashish',
}

const value = user?.vehicle ?? 'Audi'

console.log(value);

23.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

24. 
***textContent vs innerText vs innerHTML***

<h1 id='heading'>Namaste JavaScript <span style="display: none;">Waah guruji</span><h1>

const heading = document.getElementById('heading');
heading.textContent; // Namaste JavaScript Waah guruji
heading.innerText; // Namaste JavaScript
heading.innerHTML; // Namaste JavaScript <span style="display: none;">Waah guruji</span>

// DIY
heading.innerHTML = "<p class='para'>A paragraph</p>";
heading.textContent = "<p class='para'>A paragraph</p>";
heading.innerText = "<p class='para'>A paragraph</p>";
console.log(heading);

25.
htmlcollection vs nodelist
 
26.
const div1 = document.querySelector('.container');
div1.innerText = 'Namaste JavaScript';
// OR
div.appendChild(document.createTextNode('Namaste JavaScript'));

/* +++++++++++++++++++++++++ */
const div = document.querySelector('.container');


function createNewElement(elem, text, whereToAppend) {
    const element = document.createElement(elem);
    element.innerHTML = text;
    whereToAppend.appendChild(element);
}

createNewElement('h5', 'ram ram sabko', div);
createNewElement('h1', 'gazab', div);

27.
<h1>Color Changer</h1>
<div class="container">
    <p class="box" id="grey"></p>
    <p class="box" id="white"></p>
    <p class="box" id="blue"></p>
    <p class="box" id="yellow"></p>
</div>
    
    const container = document.querySelector('.container');

// event delegation (achieved using the concept of event bubbling)
container.addEventListener('click', (event) => {
    if (event.target.tagName === 'P') {
        document.body.style.backgroundColor = event.target.id;
    }
})

28.
input.value returns a string type value

29.
new Date().toLocaleTimeString();
'6:12:49 PM'

30.
// ul -> li -> img
// Task: remove the image when user clicks on it

    <ul class="images">
        <li>
            <img 
            width="100px" 
            height="100px"
            src="https://images.unsplash.com/photo-1697947656193-a87d460b5fb5?q=80&w=912&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
            />
        </li>
    </ul>

    document.querySelector('.images').addEventListener('click', (e) => {
    // console.log(e.target.parentNode);
    if (e.target.tagName === 'IMG') {
        let removeIt = e.target.parentNode;
        removeIt.remove();
    }
})

31.
// Important event properties:
// type,target, currentTarget, clientX, clientY
// timeStamp, defaultPrevented, srcElement, altKey, ctrlKey, shiftKey
// key, keycode, code  <--- for keyboard events

eg. 

//    <table border="1px">
//         <tr>
//             <th>Key</th>
//             <th>Keycode</th>
//             <th>Keycodecode</th>
//         </tr>
//         <tr>
//             <td id="key">press a key</td>
//             <td id="keycode">press a key</td>
//             <td id="code">press a key</td>
//         </tr>
//     </table> 

const keyEl = document.getElementById('key');
const keycodeEl = document.getElementById('keycode');
const codeEL = document.getElementById('code');

window.addEventListener('keypress', (e) => {
    keyEl.innerHTML = e.key === ' ' ? 'space' : e.key;
    keycodeEl.innerHTML = e.keyCode; // keyCode is deprecated
    codeEL.innerHTML = e.code;
})

32.
https://www.w3schools.com/jsref/dom_obj_event_prop.asp
https://www.w3schools.com/jsref/obj_event.asp

33.
https://www.browserstack.com/guide/browser-rendering-engine#:~:text=3.-,Rendering%20Engine,displayed%20on%20the%20user%20interface

34.
/*
    <button id="start">Start</button>
    <button id="stop">Stop</button>
*/

const startBtn = document.getElementById('start');
const stopBtn = document.getElementById('stop');

let intervalId;
let counter = 0;

startBtn.addEventListener('click', (e) => {
    intervalId = setInterval(() => {
        console.log('Namaste JavaScript', ++counter);
    }, 1000);
})

stopBtn.addEventListener('click', (e) => {
    clearInterval(intervalId);
})

35.
fetch('https://api.github.com/user/tiwariraw')
    .then(data => {
        return data.json();
    })
    .then(json => {
        console.log(json);
    })
    .catch(err => console.error(err))

// even if there is an error like 404 not found, we'll get inside the then handler only i.e.
// it is the resolved value.

// It will only go to cacth handler when there is not internet connection

36.
// A fetch() promise only rejects when a network error is 
// encountered (which is usually when there's a permissions issue or similar).
// A fetch() promise does not reject on HTTP errors (404, etc.). Instead, 
// a then() handler must check the Response.ok and/or Response.status properties.

// https://developer.mozilla.org/en-US/docs/Web/API/fetch

37.
// new.target is only undefined when the function is invoked without new. For 
// A function can know whether it is invoked with new by checking new.target. 
// example, you can have a function that behaves differently when it's called 
// versus when it's constructed:

/*
function Car(color) {
  if (!new.target) {
    // Called as function.
    return `${color} car`;
  }
  // Called with new.
  this.color = color;
}

const a = Car("red"); // a is "red car"
const b = new Car("red"); // b is `Car { color: "red" }`

console.log(a.constructor);
The constructor data property of an Object instance returns a reference to the constructor function that created the instance object
*/

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new


// Here's what happends behind the scenes when the new keyword is used:

// 1. A new instance of the constructor function is created i.e. a new blank object is created.

// 2. A prototype is linked: The newly created object gets linked to the prototype
// property of the constructor function. This means that it has access to properties
// and methods defined on the constructor's prototype.

// 3. Executes the constructor function with the given arguments, binding
// newInstance as the this context (i.e. all references to this in the
// constructor function now refer to newInstance).

// 4.. The constructor is called: The constructor function is called with the given
// arguments and this is bound to newly created object. If the constructor
// function returns a non-primitive, this return value becomes the result of
// the whole new expression. Otherwise, if the constructor function doesn't
//  return anything or returns a primitive, newInstance (this) is returned instead.
//  (Normally constructors don't return a value, but they can choose to do so
// to override the normal object creation process.)

38.
let obj1 = {
    'key1': 'value1',
}

let obj2 = {
    'key2': 'value2',
}

let obj3 = {
    'key3': 'value3',
    __proto__: obj1,
}

obj2.__proto__ = obj1;

console.log(obj2.key1);
console.log(obj1.key1);

// Another method

/*
Object.setPrototypeOf(obj3, obj1);
console.log(obj3.key1); // value1
*/

39.
class User {
    constructor() {
        this.name = 'demo';
    }

    get name() {
        return this.name;
    }

    set name(newName) {
        this.name = newName;
    }
}

const user1 = new User();

// How a setter method is used to set a value:
user1.name = 'Hitesh';

// The above line calls the setter method and passes 'Hitesh' as an argument which 
// is received in the 'newName' parameter of the setter method.

// In the constructor, when the line: this.name = 'demo' is encountered,
// it calls the setter by passing 'demo' as an argument (the value of newName parameter is now 'demo').
// In the setter method, the line: this.name = newName again calls the same setter method i.e. calls itself again and again
// causing an infinite recursion.

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion

40.
// Writing getter and setter in constructor function

// https://www.youtube.com/watch?v=t6vLhF-iSxQ&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37&index=48
// https://javascript.info/property-accessors

function User(email) {
    this._email = email;

    Object.defineProperty(this, 'email', {
        get: function () {
            return this._email;
        },
        set: function (newEmail) {
            this._email = newEmail;
        }
    })
}

const user1 = new User('ashishiit9@gmail.com');
console.log(user1.email); // here, we are calling the getter for _email property

user1.email = 'demo@gmail.com'; // here, we are calling the setter for _email property
console.log(user1.email);

41. Read about 'mixins' in JavaScript from javascript.info website

42. Refer Q14.js in Interview_Questions

let num = 60;

decimal to binary => num.toString(2);
decimal to octal => num.toString(8);
decimal to hexadecimal => num.toString(16);

hexadecimal to decimal => parseInt(hexString,16)

43.
// Check if all the elements of the array are of same type

const nums = [2, 4, 6, 8, 10];

const output = nums.every(num => {
    return typeof num === 'number';
})

console.log(output);

44.
// Whenever we sort objects in an array, we use the object key to compare

const users = [
    { name: 'Asabeneh', age: 150 },
    { name: 'Brook', age: 50 },
    { name: 'Eyob', age: 100 },
    { name: 'Elias', age: 22 },
]

users.sort(function (a, b) {
    return a.age - b.age
});

console.log(users);

45.
/********************** Asabeneh 30 days JS **********************/

